/// DO NOT EDIT - This file was auto-generated by CleanseGen/main.swift
extension BindToable {

/// 1-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get())
    )
   })
}

/// 2-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get())
    )
   })
}

/// 3-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get())
    )
   })
}

/// 4-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get())
    )
   })
}

/// 5-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get())
    )
   })
}

/// 6-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get())
    )
   })
}

/// 7-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get())
    )
   })
}

/// 8-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get())
    )
   })
}

/// 9-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get())
    )
   })
}

/// 10-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get())
    )
   })
}

/// 11-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get())
    )
   })
}

/// 12-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get())
    )
   })
}

/// 13-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get())
    )
   })
}

/// 14-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get())
    )
   })
}

/// 15-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get())
    )
   })
}

/// 16-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get())
    )
   })
}

/// 17-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get())
    )
   })
}

/// 18-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get())
    )
   })
}

/// 19-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get())
    )
   })
}

/// 20-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get())
    )
   })
}

/// 21-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get())
    )
   })
}

/// 22-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get())
    )
   })
}

/// 23-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get())
    )
   })
}

/// 24-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get())
    )
   })
}

/// 25-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get())
    )
   })
}

/// 26-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get())
    )
   })
}

/// 27-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get())
    )
   })
}

/// 28-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get())
    )
   })
}

/// 29-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get())
    )
   })
}

/// 30-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get())
    )
   })
}

/// 31-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get())
    )
   })
}

/// 32-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get())
    )
   })
}

/// 33-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider33 = binder.provider(P_33.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get(),
        provider33.get())
    )
   })
}

/// 34-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider33 = binder.provider(P_33.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider34 = binder.provider(P_34.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get(),
        provider33.get(),
        provider34.get())
    )
   })
}

/// 35-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider33 = binder.provider(P_33.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider34 = binder.provider(P_34.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider35 = binder.provider(P_35.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get(),
        provider33.get(),
        provider34.get(),
        provider35.get())
    )
   })
}

/// 36-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider33 = binder.provider(P_33.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider34 = binder.provider(P_34.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider35 = binder.provider(P_35.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider36 = binder.provider(P_36.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get(),
        provider33.get(),
        provider34.get(),
        provider35.get(),
        provider36.get())
    )
   })
}

/// 37-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider33 = binder.provider(P_33.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider34 = binder.provider(P_34.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider35 = binder.provider(P_35.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider36 = binder.provider(P_36.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider37 = binder.provider(P_37.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get(),
        provider33.get(),
        provider34.get(),
        provider35.get(),
        provider36.get(),
        provider37.get())
    )
   })
}

/// 38-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37, P_38>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37, P_38)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider33 = binder.provider(P_33.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider34 = binder.provider(P_34.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider35 = binder.provider(P_35.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider36 = binder.provider(P_36.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider37 = binder.provider(P_37.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider38 = binder.provider(P_38.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get(),
        provider33.get(),
        provider34.get(),
        provider35.get(),
        provider36.get(),
        provider37.get(),
        provider38.get())
    )
   })
}

/// 39-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37, P_38, P_39>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37, P_38, P_39)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider33 = binder.provider(P_33.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider34 = binder.provider(P_34.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider35 = binder.provider(P_35.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider36 = binder.provider(P_36.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider37 = binder.provider(P_37.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider38 = binder.provider(P_38.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider39 = binder.provider(P_39.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get(),
        provider33.get(),
        provider34.get(),
        provider35.get(),
        provider36.get(),
        provider37.get(),
        provider38.get(),
        provider39.get())
    )
   })
}

/// 40-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37, P_38, P_39, P_40>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37, P_38, P_39, P_40)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider33 = binder.provider(P_33.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider34 = binder.provider(P_34.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider35 = binder.provider(P_35.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider36 = binder.provider(P_36.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider37 = binder.provider(P_37.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider38 = binder.provider(P_38.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider39 = binder.provider(P_39.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider40 = binder.provider(P_40.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get(),
        provider33.get(),
        provider34.get(),
        provider35.get(),
        provider36.get(),
        provider37.get(),
        provider38.get(),
        provider39.get(),
        provider40.get())
    )
   })
}

/// 41-arity `to(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@discardableResult public func to<P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37, P_38, P_39, P_40, P_41>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping ((P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, P_21, P_22, P_23, P_24, P_25, P_26, P_27, P_28, P_29, P_30, P_31, P_32, P_33, P_34, P_35, P_36, P_37, P_38, P_39, P_40, P_41)) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider2 = binder.provider(P_2.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider3 = binder.provider(P_3.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider4 = binder.provider(P_4.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider5 = binder.provider(P_5.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider6 = binder.provider(P_6.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider7 = binder.provider(P_7.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider8 = binder.provider(P_8.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider9 = binder.provider(P_9.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider10 = binder.provider(P_10.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider11 = binder.provider(P_11.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider12 = binder.provider(P_12.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider13 = binder.provider(P_13.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider14 = binder.provider(P_14.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider15 = binder.provider(P_15.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider16 = binder.provider(P_16.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider17 = binder.provider(P_17.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider18 = binder.provider(P_18.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider19 = binder.provider(P_19.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider20 = binder.provider(P_20.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider21 = binder.provider(P_21.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider22 = binder.provider(P_22.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider23 = binder.provider(P_23.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider24 = binder.provider(P_24.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider25 = binder.provider(P_25.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider26 = binder.provider(P_26.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider27 = binder.provider(P_27.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider28 = binder.provider(P_28.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider29 = binder.provider(P_29.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider30 = binder.provider(P_30.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider31 = binder.provider(P_31.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider32 = binder.provider(P_32.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider33 = binder.provider(P_33.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider34 = binder.provider(P_34.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider35 = binder.provider(P_35.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider36 = binder.provider(P_36.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider37 = binder.provider(P_37.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider38 = binder.provider(P_38.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider39 = binder.provider(P_39.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider40 = binder.provider(P_40.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)
    let provider41 = binder.provider(P_41.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory((
        provider1.get(),
        provider2.get(),
        provider3.get(),
        provider4.get(),
        provider5.get(),
        provider6.get(),
        provider7.get(),
        provider8.get(),
        provider9.get(),
        provider10.get(),
        provider11.get(),
        provider12.get(),
        provider13.get(),
        provider14.get(),
        provider15.get(),
        provider16.get(),
        provider17.get(),
        provider18.get(),
        provider19.get(),
        provider20.get(),
        provider21.get(),
        provider22.get(),
        provider23.get(),
        provider24.get(),
        provider25.get(),
        provider26.get(),
        provider27.get(),
        provider28.get(),
        provider29.get(),
        provider30.get(),
        provider31.get(),
        provider32.get(),
        provider33.get(),
        provider34.get(),
        provider35.get(),
        provider36.get(),
        provider37.get(),
        provider38.get(),
        provider39.get(),
        provider40.get(),
        provider41.get())
    )
   })
}

/// 1-arity `to1(factory:)` function.
/// This completes the binding process for registering the provider for the type passed (or inferred) to `bind()`.
/// - parameter factory: Takes arguments required to construct `Element` passed to the `bind()` function
///
/// - Note: This method was auto-generated by CleanseGen/main.swift
@available(*, renamed: "to")
@discardableResult public func to1<P_1>(file: StaticString=#file, line: Int=#line, function: StaticString=#function, factory: @escaping (P_1) -> Input)  -> BindingReceipt<Input> {
    let binder = self.binder, finalBindingType = self._finalProviderType as! AnyProvider.Type
    let provider1 = binder.provider(P_1.self, file: file, line: line, function: function, providerRequiredFor: finalBindingType)

    return _innerTo(file: file, line: line, function: function, provider: Provider {
     factory(
        provider1.get()
    )
   })
}

}
